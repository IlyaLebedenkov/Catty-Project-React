{"version":3,"sources":["compnent/nav/Nav.js","compnent/home/Home.js","compnent/fav/Favorites.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","className","to","Home","apiKey","useState","catInfo","setCatInfo","newFetch","setNewFetch","useEffect","url","a","fetch","method","headers","response","json","fetchCat","onClick","favorites","cats_storage","JSON","parse","localStorage","getItem","includes","alert","setItem","stringify","push","src","alt","Favorites","favCats","setFavCats","map","fav","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAmBeA,MAff,WACE,OACE,qBAAKC,UAAU,kBAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,gCAGA,cAAC,IAAD,CAASC,GAAG,OAAOD,UAAU,WAA7B,uC,6CC2DOE,MAjEf,WAAiB,IAAD,EACRC,EAAS,uCADD,EAGgBC,mBAAS,IAHzB,mBAGPC,EAHO,KAGEC,EAHF,OAIkBF,mBAAS,GAJ3B,mBAIPG,EAJO,KAIGC,EAJH,KA+Cd,OAzCAC,qBAAU,WAAM,4CAEd,WAAwBC,GAAxB,eAAAC,EAAA,sEACyBC,MAAMF,EAAK,CAChCG,OAAQ,MACRC,QAAS,CACP,YAAaX,KAJnB,cACQY,EADR,YAOET,EAPF,SAOmBS,EAASC,OAP5B,8EAFc,sBACdV,EAAW,IADG,oCAYdW,CAAS,gDACR,CAACV,IA6BF,gCACE,sBAAKP,UAAU,eAAf,UACE,wBAAQkB,QA7BM,WAClBV,EAAYD,EAAW,IA4BnB,6BACA,wBAAQW,QA1BG,WACf,IAAIC,EAAY,GACVC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,kBACjDJ,GACFD,EAAS,YAAOC,GACZf,EAAQ,KACLe,EAAaK,SAASpB,EAAQ,GAAGK,KAKpCgB,MAAM,kBAJNP,EAAS,sBAAOA,GAAP,CAAkBd,EAAQ,GAAGK,MACtCa,aAAaI,QAAQ,gBAAiBN,KAAKO,UAAUT,IACrDO,MAAM,YAMNrB,EAAQ,KACVc,EAAUU,KAAKxB,EAAQ,GAAGK,KAC1Ba,aAAaI,QAAQ,gBAAiBN,KAAKO,UAAUT,MASrD,gCAGF,qBAAKnB,UAAU,YAAf,SACGK,EAAQ,GACP,qBAAKyB,IAAG,UAAEzB,EAAQ,UAAV,aAAE,EAAYK,IAAKqB,IAAI,UAE/B,iD,MCzCKC,MAnBf,WAAsB,IAAD,EACW5B,mBAAS,IADpB,mBACZ6B,EADY,KACHC,EADG,KAEbd,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,kBAMrD,OAJAf,qBAAU,WACRyB,EAAWd,KACV,CAACA,IAGF,qBAAKpB,UAAU,oBAAf,SACE,qBAAKA,UAAU,sBAAf,SACGiC,EAAQE,KAAI,SAACC,GAAD,OACX,qBAAKN,IAAKM,EAAKL,IAAI,qBCGdM,MAZf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,EAAD,aCArBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92aa852b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <div className=\"navbar__wrapper\">\r\n      <div className=\"nav__container\">\r\n        <NavLink to=\"/\" className=\"nav_link\">\r\n          Get Random Kitties\r\n        </NavLink>\r\n        <NavLink to=\"/fav\" className=\"nav_link\">\r\n          My Favorite Kitties\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Home.css\";\r\n\r\n// adf08f84-4e63-47ef-b690-ac4d18eda6d0 api key\r\n\r\nfunction Home() {\r\n  const apiKey = \"adf08f84-4e63-47ef-b690-ac4d18eda6d0\";\r\n\r\n  const [catInfo, setCatInfo] = useState([]);\r\n  const [newFetch, setNewFetch] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCatInfo([]); // empty state on each press\r\n    async function fetchCat(url) {\r\n      const response = await fetch(url, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"x-api-key\": apiKey,\r\n        },\r\n      });\r\n      setCatInfo(await response.json());\r\n    }\r\n\r\n    fetchCat(\"https://api.thecatapi.com/v1/images/search\");\r\n  }, [newFetch]);\r\n\r\n  const fetchNewCat = () => {\r\n    setNewFetch(newFetch + 1);\r\n  };\r\n\r\n  const addToFav = () => {\r\n    let favorites = [];\r\n    const cats_storage = JSON.parse(localStorage.getItem(\"favorite_cats\"));\r\n    if (cats_storage) {\r\n      favorites = [...cats_storage];\r\n      if (catInfo[0]) {\r\n        if (!cats_storage.includes(catInfo[0].url)) {\r\n          favorites = [...favorites, catInfo[0].url];\r\n          localStorage.setItem(\"favorite_cats\", JSON.stringify(favorites));\r\n          alert(\"Added\");\r\n        } else {\r\n          alert(\"Already added\");\r\n        }\r\n      }\r\n    } else {\r\n      if (catInfo[0]) {\r\n        favorites.push(catInfo[0].url);\r\n        localStorage.setItem(\"favorite_cats\", JSON.stringify(favorites));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"home__header\">\r\n        <button onClick={fetchNewCat}>Fetch New Kitty</button>\r\n        <button onClick={addToFav}>Add to Favorite</button>\r\n      </div>\r\n\r\n      <div className=\"home__img\">\r\n        {catInfo[0] ? (\r\n          <img src={catInfo[0]?.url} alt=\"kitty\" />\r\n        ) : (\r\n          <p>Loading...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Favorites.css\";\r\n\r\nfunction Favorites() {\r\n  const [favCats, setFavCats] = useState([]);\r\n  const cats_storage = JSON.parse(localStorage.getItem(\"favorite_cats\"));\r\n\r\n  useEffect(() => {\r\n    setFavCats(cats_storage);\r\n  }, [cats_storage]);\r\n\r\n  return (\r\n    <div className=\"favorites_wrapper\">\r\n      <div className=\"faorites__container\">\r\n        {favCats.map((fav) => (\r\n          <img src={fav} alt=\"fav_cats\" />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","import \"./App.css\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport Nav from \"./compnent/nav/Nav\";\r\nimport Home from \"./compnent/home/Home\";\r\nimport Favorites from \"./compnent/fav/Favorites\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Nav />\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<Home />} />\r\n        <Route path=\"/fav\" element={<Favorites />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}